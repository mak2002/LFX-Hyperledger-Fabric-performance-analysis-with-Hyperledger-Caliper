input {
    tcp {
        port  => 7042
        codec => json
    }
}

filter {

    #########################
    # EXTRACT SERVICE NAMES #
    #########################

    # Different service name pattern for CC containers
    if [docker][name] =~ /^\/dev-.*/ {
        # general form: /dev-<peerX>.<orgY>.example.com-<CC>-<version>
        grok {
            match => {
                "[docker][name]" => "^\/dev-(?<ccpeer>[a-zA-Z0-9]+).(?<ccorg>[a-zA-Z0-9]+).example.com-(?<ccname>[a-zA-Z0-9]+)-.+"
            }
            tag_on_failure => ["_service-name-extract-failure", "_log-error"]
        }

        if "_service-name-extract-failure" not in [tags] {
            # Combine the parts into a single "service" name
            mutate {
                add_field => {
                    "service" => "cc-%{ccname}-%{ccpeer}-%{ccorg}"
                }
            }
        }
    } else {
        # extract service name from non-chaincode containers
        # general form: /<stack_name>_<service_name>.<instance>.<other stuff>
        grok {
            match => {
                "[docker][name]" => "^\/.+_(?<service>[a-zA-Z0-9\-]+)\..+"
            }
			# test case: 01.json
            tag_on_failure => ["_service-name-extract-failure", "_log-error"]
        }
    }

    if "_service-name-extract-failure" not in [tags] {
		#########################
		# STRUCTURE LOG MESSAGE #
		#########################

		# extract timestamp, level, module and message
		dissect {
			mapping => {
				"message" => "%{time} | %{level} | %{module} | %{msg}"
			}
			# test case: 02.json
			tag_on_failure => ["_message-structuring-failure", "_log-error"]
		}

		if "_log-error" not in [tags] {
			date {
				match => [ "time", "yyyy-MM-dd_kk:mm:ss.SSS ZZZ", "yyyy-MM-dd_kk:mm:ss.SSS Z", "ISO8601" ]
				tag_on_failure => ["_date-match-failure", "_log-error"]
			}
		}

		if "_message-structuring-failure" not in [tags] {
			##########################
			# MINE TX AND BLOCK INFO #
			##########################

			# test case: 03.json
			if [service] =~ /caliper.*/ and [module] == "txinfo" {

				###################
				# CALIPER TX INFO #
				###################

				json {
					source => "msg"
					target => "txinfo"
					add_tag => ["txinfo"]
					tag_on_failure => ["_caliper-txinfo-extract-failure", "_log-error"]
				}
			# test case: 04.json
			} else if [service] =~ /^cc-.+/ and [module] == "txinfo" {

				#####################
				# CHAINCODE TX INFO #
				#####################

				json {
					source => "msg"
					target => "txinfo"
					add_tag => ["txinfo"]
					tag_on_failure => ["_cc-txinfo-extract-failure", "_log-error"]
				}

				# postfix the fields (except for the indices) with the corresponding peer service name
				# e.g., cc_duration_ms => cc_duration_ms_peer0org1
				mutate {
					# add new fields based on service name
					# the referenced fields come from the CC service name extraction
					add_field => {
						"[txinfo][cc_tx_id_%{ccpeer}%{ccorg}]" => "%{[txinfo][tx_id]}"

						"[txinfo][cc_start_time_epoch_ms_%{ccpeer}%{ccorg}]" => "%{[txinfo][cc_start_time_epoch_ms]}"
						"[txinfo][cc_end_time_epoch_ms_%{ccpeer}%{ccorg}]" => "%{[txinfo][cc_end_time_epoch_ms]}"
						"[txinfo][cc_duration_ms_%{ccpeer}%{ccorg}]" => "%{[txinfo][cc_duration_ms]}"

						"[txinfo][stat_get_cnt_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_get_cnt]}"
						"[txinfo][stat_get_size_bytes_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_get_size_bytes]}"
						"[txinfo][stat_get_exec_total_ms_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_get_exec_total_ms]}"

						"[txinfo][stat_put_cnt_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_put_cnt]}"
						"[txinfo][stat_put_size_bytes_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_put_size_bytes]}"
						"[txinfo][stat_put_exec_total_ms_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_put_exec_total_ms]}"

						"[txinfo][stat_del_cnt_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_del_cnt]}"
						"[txinfo][stat_del_exec_total_ms_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_del_exec_total_ms]}"

						"[txinfo][stat_iterate_cnt_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_iterate_cnt]}"
						"[txinfo][stat_iterate_size_bytes_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_iterate_size_bytes]}"
						"[txinfo][stat_iterate_exec_total_ms_%{ccpeer}%{ccorg}]" => "%{[txinfo][stat_iterate_exec_total_ms]}"

						"[txinfo][md_tpcc_delivery_skipped_%{ccpeer}%{ccorg}]" => "%{[txinfo][md_tpcc_delivery_skipped]}"
						"[txinfo][md_tpcc_delivery_total_order_lines_%{ccpeer}%{ccorg}]" => "%{[txinfo][md_tpcc_delivery_total_order_lines]}"
						"[txinfo][md_tpcc_order_status_order_lines_%{ccpeer}%{ccorg}]" => "%{[txinfo][md_tpcc_order_status_order_lines]}"
						"[txinfo][md_tpcc_stock_level_recent_items_%{ccpeer}%{ccorg}]" => "%{[txinfo][md_tpcc_stock_level_recent_items]}"
					}

					# remove original peer-agnostic fields
					remove_field => ["[txinfo][tx_id]", "[txinfo][cc_start_time_epoch_ms]", "[txinfo][cc_end_time_epoch_ms]", "[txinfo][cc_duration_ms]", "[txinfo][stat_get_cnt]", "[txinfo][stat_get_size_bytes]", "[txinfo][stat_get_exec_total_ms]", "[txinfo][stat_put_cnt]", "[txinfo][stat_put_size_bytes]", "[txinfo][stat_put_exec_total_ms]", "[txinfo][stat_del_cnt]", "[txinfo][stat_del_exec_total_ms]", "[txinfo][stat_iterate_cnt]", "[txinfo][stat_iterate_size_bytes]", "[txinfo][stat_iterate_exec_total_ms]", "[txinfo][md_tpcc_delivery_skipped]", "[txinfo][md_tpcc_delivery_total_order_lines]", "[txinfo][md_tpcc_order_status_order_lines]", "[txinfo][md_tpcc_stock_level_recent_items]"]
				}
			# test case: 05.json
			} else if [service] =~ /orderer.+/ and [module] == "orderer.consensus.etcdraft" and [msg] =~ /^Writing block .+/ {

				#############################
				# ORDERER BLOCK COMMIT INFO #
				#############################

				grok {
					# extract the following: blocknum, raftindex, channel
					match => {
						"[msg]" => "^Writing block \[(?<blocknum>\d+)\] \(Raft index: (?<raftindex>\d+)\) to ledger channel=(?<channel>.+) node=\d+$"
					}
					add_tag => ["blockinfo"]
					tag_on_failure => ["_orderer-blockinfo-extract-failure", "_log-error"]
				}

				if "_log-error" not in [tags] {
					# add the blockinfo tag with its nested fields, plus the orderer-specific timestamp
					mutate {
						# add new fields based on service name
						add_field => {
							"[blockinfo][block_id]" => "%{[channel]}.%{[blocknum]}"
							"[blockinfo][block_num]" => "%{[blocknum]}"
							"[blockinfo][channel]" => "%{[channel]}"
							"[blockinfo][timestamp_%{[service]}]" => "%{[time]}"
						}
					}
				}
			# test case: 06.json
			} else if [service] =~ /orderer.+/ and [module] == "orderer.consensus.etcdraft" and [msg] =~ /^Created block .+/ {

				#############################
				# ORDERER BLOCK CREATE INFO #
				#############################

				grok {
					# extract the following: blocknum, channel
					match => {
						"[msg]" => "^Created block \[(?<blocknum>\d+)\], there are \d+ blocks in flight channel=(?<channel>.+) node=\d+$"
					}
					add_tag => ["blockinfo"]
					tag_on_failure => ["_orderer-blockinfo-create-extract-failure", "_log-error"]
				}

				if "_log-error" not in [tags] {
					# add the blockinfo tag with its nested fields, plus the orderer-specific timestamp
					mutate {
						# add new fields based on service name
						add_field => {
							"[blockinfo][block_id]" => "%{[channel]}.%{[blocknum]}"
							"[blockinfo][block_num]" => "%{[blocknum]}"
							"[blockinfo][channel]" => "%{[channel]}"
							"[blockinfo][block_created_timestamp_%{[service]}]" => "%{[time]}"
						}
					}
				}
			# test case: 07.json
			} else if [service] =~ /peer.+/ and [module] == "committer.txvalidator" and [msg] =~ /.+ Validated block .+/ {

				################################
				# PEER BLOCK INFO - VALIDATION #
				################################

				grok {
					# extract the following: channel, blocknum, block_validation_ms
					match => {
						"[msg]" => "^\[(?<channel>.+)\] Validated block \[(?<blocknum>\d+)\] in (?<block_validation_ms>\d+)ms$"
					}
					add_tag => ["blockinfo"]
					tag_on_failure => ["_peer-blockinfo-validation-extract-failure", "_log-error"]
				}

				if "_log-error" not in [tags] {
					# add the blockinfo tag with its nested fields, plus the peer-specific prefixes
					mutate {
						# add new fields based on service name
						add_field => {
							"[blockinfo][block_id]" => "%{[channel]}.%{[blocknum]}"
							"[blockinfo][block_num]" => "%{[blocknum]}"
							"[blockinfo][channel]" => "%{[channel]}"
							"[blockinfo][timestamp_validation_%{[service]}]" => "%{[time]}"
							"[blockinfo][block_validation_ms_%{[service]}]" => "%{[block_validation_ms]}"
						}
					}
				}
			# test case: 08.json
			} else if [service] =~ /peer.+/ and [module] == "kvledger" and [msg] =~ /.+ Committed block .+/ {
				# parse block commit info message from peers

				############################
				# PEER BLOCK INFO - COMMIT #
				############################

				grok {
					# extract the following: channel, blocknum, txcount, total_commit_time_ms, state_validation_time_ms, block_and_pvtdata_commit_ms, state_commit_time_ms
					match => {
						"[msg]" => "^\[(?<channel>.+)\] Committed block \[(?<blocknum>\d+)\] with (?<txcount>\d+) transaction\(s\) in (?<total_commit_time_ms>\d+)ms \(state_validation=(?<state_validation_time_ms>\d+)ms block_and_pvtdata_commit=(?<block_and_pvtdata_commit_ms>\d+)ms state_commit=(?<state_commit_time_ms>\d+)ms\)"
					}
					add_tag => ["blockinfo"]
					tag_on_failure => ["_peer-blockinfo-commit-extract-failure", "_log-error"]
				}

				if "_log-error" not in [tags] {
					# add the blockinfo tag with its nested fields, plus the peer-specific suffixes
					mutate {
						# add new fields based on service name
						add_field => {
							"[blockinfo][block_id]" => "%{[channel]}.%{[blocknum]}"
							"[blockinfo][block_num]" => "%{[blocknum]}"
							"[blockinfo][channel]" => "%{[channel]}"
							"[blockinfo][tx_count]" => "%{[txcount]}"
							"[blockinfo][timestamp_commit_%{[service]}]" => "%{[time]}"
							"[blockinfo][total_commit_time_ms_%{[service]}]" => "%{[total_commit_time_ms]}"
							"[blockinfo][state_validation_time_ms_%{[service]}]" => "%{[state_validation_time_ms]}"
							"[blockinfo][block_and_pvtdata_commit_ms_%{[service]}]" => "%{[block_and_pvtdata_commit_ms]}"
							"[blockinfo][state_commit_time_ms_%{[service]}]" => "%{[state_commit_time_ms]}"
						}
					}
				}
			} else if [service] =~ /peer.+/ and [module] == "gossip.privdata" and [msg] =~ /.+ Received block .+/ {
				# parse block commit info message from peers

				###########################
				# PEER BLOCK RECEIVE INFO #
				###########################

				grok {
					# extract the following: channel, blocknum, txcount, total_commit_time_ms, state_validation_time_ms, block_and_pvtdata_commit_ms, state_commit_time_ms
					match => {
						"[msg]" => "^\[(?<channel>.+)\] Received block \[(?<blocknum>\d+)\] from buffer$"
					}
					add_tag => ["blockinfo"]
					tag_on_failure => ["_peer-block-received-extract-failure", "_log-error"]
				}

				if "_log-error" not in [tags] {
					# add the blockinfo tag with its nested fields, plus the peer-specific suffixes
					mutate {
						# add new fields based on service name
						add_field => {
							"[blockinfo][block_id]" => "%{[channel]}.%{[blocknum]}"
							"[blockinfo][block_num]" => "%{[blocknum]}"
							"[blockinfo][channel]" => "%{[channel]}"
							"[blockinfo][block_received_%{[service]}]" => "%{[time]}"
						}
					}
				}
			} else if [service] =~ /peer.+/ and [module] == "endorser" and [msg] =~ /.+Entry chaincode.+/ {

				######################
				# PEER CC START INFO #
				######################

				grok {
					# extract the following: channel, blocknum, txcount, total_commit_time_ms, state_validation_time_ms, block_and_pvtdata_commit_ms, state_commit_time_ms
					match => {
						"[msg]" => '\[(?<channel>.+)\]\[(?<tx_short_id>.+)\] Entry chaincode: name:"(?<chaincode>.+)"'
					}
					add_tag => ["shorttxinfo"]
					tag_on_failure => ["_peer-cc-entry-extract-failure", "_log-error"]
				}

				if "_log-error" not in [tags] {
					# add the blockinfo tag with its nested fields, plus the peer-specific suffixes
					mutate {
						# add new fields based on service name
						add_field => {
							"[shorttxinfo][tx_short_id]" => "%{[tx_short_id]}"
							"[shorttxinfo][channel]" => "%{[channel]}"
							"[shorttxinfo][chaincode]" => "%{[chaincode]}"
							"[shorttxinfo][chaincode_entry_%{[service]}]" => "%{[time]}"
						}
					}
				}
			} else if [service] =~ /peer.+/ and [module] == "endorser" and [msg] =~ /.+Exit chaincode.+/ {

				#####################
				# PEER CC EXIT INFO #
				#####################

				grok {
					# extract the following: channel, blocknum, txcount, total_commit_time_ms, state_validation_time_ms, block_and_pvtdata_commit_ms, state_commit_time_ms
					match => {
						"[msg]" => '\[(?<channel>.+)\]\[(?<tx_short_id>.+)\] Exit chaincode: name:"(?<chaincode>.+)"  \((?<duration>\d+)ms\)'
					}
					add_tag => ["shorttxinfo"]
					tag_on_failure => ["_peer-cc-exit-extract-failure", "_log-error"]
				}

				if "_log-error" not in [tags] {
					# add the blockinfo tag with its nested fields, plus the peer-specific suffixes
					mutate {
						# add new fields based on service name
						add_field => {
							"[shorttxinfo][tx_short_id]" => "%{[tx_short_id]}"
							"[shorttxinfo][channel]" => "%{[channel]}"
							"[shorttxinfo][chaincode]" => "%{[chaincode]}"
							"[shorttxinfo][chaincode_exit_%{[service]}]" => "%{[time]}"
							"[shorttxinfo][chaincode_call_duration_ms_%{[service]}]" => "%{[duration]}"
						}
					}
				}
			}
		}
    }

    ################
    # SET EVENT ID #
    ################

    # set/calculate a root "event_id" field as doc key

    if "txinfo" in [tags] {
        # the event ID will be the source indices, so corresponding TX events from multiple sources can update the doc
        mutate {
            add_field => {
                "[event_id]" => "%{[txinfo][worker_index]}.%{[txinfo][terminal_index]}.%{[txinfo][tx_index]}"
            }
        }
    } else if "blockinfo" in [tags] {
        # the event ID will be the block ID (channel + block index), so corresponding block events from multiple sources can update the doc
        mutate {
            add_field => {
                "[event_id]" => "%{[blockinfo][block_id]}"
            }
        }
    } else if "shorttxinfo" in [tags] {
        # the event ID will be the short TX ID, so corresponding TX events from multiple sources can update the doc
        mutate {
            add_field => {
                "[event_id]" => "%{[shorttxinfo][tx_short_id]}"
            }
        }
    }
	else {
        fingerprint {
            method => "SHA256"
            source => ["message"]
            target => "event_id"
        }

        mutate {
            convert => {
                "event_id" => "string"
            }
        }
    }
}

output {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        document_id => "%{[event_id]}"
        index => "bench"
        action => "update"
        doc_as_upsert => true
    }
}