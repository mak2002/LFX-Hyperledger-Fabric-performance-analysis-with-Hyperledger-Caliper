input {
   pipeline {
      address => peerLogs
   }
}

filter {
   mutate {
      add_field => {
         "peerTestField" => "peerTestFieldValue"
      }
   }

   if [fabric_log_message] =~ /.+ Validated block .+/ {
      grok {
         match => {
            "fabric_log_message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{GREEDYDATA} \[%{WORD:channel_name}\] Validated block \[%{NUMBER:block_number:int}\] in %{NUMBER:processing_time}ms"
         }
         tag_on_failure => ["_orderer-blockinfo-extract-failure", "_log-error"]
      }

      if "_orderer-blockinfo-extract-failure" not in [tags] {
         mutate {
            add_field => {
               "[block_info][block_number]" => "%{block_number}"
               "[block_info][channel_name]" => "%{channel_name}"
               "[block_info][processing_time]" => "%{processing_time}"
               "[block_info][block_timestamp]" => "%{log_timestamp}"
            }
         }
         mutate {
            remove_field => ["block_number", "channel_name", "processing_time", "log_timestamp"]
         }  
      }
   } else if [fabric_log_message] =~ /.+ Committed block .+/ {
      grok {
         match => {
            "fabric_log_message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{GREEDYDATA} \[%{DATA:log_level}\] %{DATA} -> \[%{DATA:channel}\] Committed block \[%{NUMBER:block_number}\] with %{NUMBER:transaction_count} transaction(s) in %{NUMBER:duration}ms \(state_validation=%{NUMBER:state_validation}ms block_and_pvtdata_commit=%{NUMBER:block_and_pvtdata_commit}ms state_commit=%{NUMBER:state_commit}ms\) commitHash=\[%{DATA:commitHash}\]"
         }
         tag_on_failure => ["_peer-blockinfo-commit-extract-failure", "_log-error"]
      }

      if "_orderer-blockinfo-extract-failure" not in [tags] {
         mutate  {
            add_field => {
               "[block_info][id]" => "%{[container_info][service]}-%{channel_name}.%{block_number}"
               "[block_info][block_number]" => "%{block_number}"
               "[block_info][channel_name]" => "%{channel_name}"
               "[block_info][transaction_count]" => "%{transaction_count}"
               "[block_info][block_timestamp]" => "%{log_timestamp}"
               "[block_info][commit_time]" => "%{commit_time}"
               "[block_info][state_validation_time]" => "%{state_validation_time}"
               "[block_info][block_and_pvtdata_commit_time]" => "%{block_and_pvtdata_commit_time}"
               "[block_info][state_commit_time]" => "%{state_commit_time}"
               "[block_info][commit_hash]" => "%{commit_hash}"
            }
            remove_field => ["block_number", "channel_name", "transaction_count", "commit_time", "state_validation_time", "block_and_pvtdata_commit_time", "state_commit_time", "log_timestamp", "commit_hash"]
         }
      } 
   } else if [fabric_log_message] =~ /.+ Received block .+/ {
      grok {
         match => {
            # 2023-09-30 17:23:16.314 UTC 09f8 INFO [gossip.privdata] StoreBlock -> Received block [457] from buffer channel=mychannel
            "fabric_log_message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{GREEDYDATA} \[%{DATA:log_source}\] %{WORD:log_event} -> Received block \[%{NUMBER:block_number:int}\] from buffer channel=%{WORD:received_channel}"
         }
         tag_on_failure => ["_orderer-blockinfo-extract-failure", "_log-error"]
      }

      if "_orderer-blockinfo-extract-failure" not in [tags] {
         mutate {
            add_field => {
               "[block_info][log_timestamp]" => "%{log_timestamp}"
               "[block_info][log_event]" => "%{log_event}"
               "[block_info][block_number]" => "%{block_number}"
               "[block_info][received_channel]" => "%{received_channel}"
            }
            remove_field => ["log_timestamp", "channel_name", "log_level", "log_source", "log_event", "block_number", "received_channel"]
         }
      }
   } 
   # These are filters for gateway functionality
   else if [fabric_log_message] =~ /.+ Sending to first .+/ { 
      mutate {
         add_field => {
            "sendinggg" => "sendinggg"
         }
      }
      grok {
         match => {
            "fabric_log_message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{GREEDYDATA} \[%{DATA:log_source}\] %{WORD:log_event} -> Sending to first endorser: MSPID=%{DATA:msp_id} endpoint=%{HOSTNAME:endpoint_host}:%{NUMBER:endpoint_port}"
         }
         tag_on_failure => ["_send-blockinfo-extract-failure", "_log-error"]
      }

      if "_send-blockinfo-extract-failure" not in [tags] {
         mutate {
            add_field => {
               "[block_info][log_timestamp]" => "%{log_timestamp}"
               "[block_info][log_source]" => "%{log_source}"
               "[block_info][log_event]" => "%{log_event}"
               "[block_info][msp_id]" => "%{msp_id}"
               "[block_info][endpoint_host]" => "%{endpoint_host}"
               "[block_info][endpoint_port]" => "%{endpoint_port}"
            }
         }
      }
   }
   else if [fabric_log_message] =~ /.+ Sending to endorser: .+/ {
      grok {
         match => {
            "fabric_log_message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{GREEDYDATA} \[%{DATA:log_source}\] %{DATA:fun} -> Sending to endorser: channel=%{DATA:mychannel} chaincode=%{DATA:chaincode} txID=%{DATA:txID} MSPID=%{DATA:MSPID} endpoint=%{HOSTNAME:endpoint_host}:%{NUMBER:endpoint_port}"
         }
         tag_on_failure => ["_endorser-blockinfo-extract-failure", "_log-error"]
      }

      if "_endorser-blockinfo-extract-failure" not in [tags] {
         mutate {
            add_field => {
               "[block_info][log_timestamp]" => "%{log_timestamp}"
               "[block_info][log_source]" => "%{log_source}"
               "[block_info][fun]" => "%{fun}"
               "[block_info][mychannel]" => "%{mychannel}"
               "[block_info][chaincode]" => "%{chaincode}"
               "[block_info][tx_ID]" => "%{txID}"
               "[block_info][msp_id]" => "%{MSPID}"
               "[block_info][endpoint_host]" => "%{endpoint_host}"
               "[block_info][endpoint_port]" => "%{endpoint_port}"
            }
            remove_field => ["log_timestamp", "log_source", "fun", "mychannel", "chaincode", "txID", "MSPID", "endpoint_host", "endpoint_port"]
         }
      }
   } 
}

output {
  if "_orderer-blockinfo-extract-failure" not in [tags] {
      exec {
         command => "curl -X POST 'http://admin:abc@couchdb:5984/fabric' -H 'Content-Type: application/json' -d '%{[block_info]}'"
      }
   }
}
