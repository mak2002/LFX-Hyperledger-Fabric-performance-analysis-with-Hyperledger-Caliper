input {
  tcp {
    port => 5000
  }
}

filter {
  json {
    source => "message"
    target => "parsed_json"
  }

  # Extracting image version from the log. For example: latest
  grok {
    match => {
      "[message]" => '%{DATA:message}image\":\"[^:]+:(?<image_version>[^\"]+)\"%{DATA}'
    }
    tag_on_failure => ["_image-version-extract-failure", "_log-error"]
  }

  # Add containers info to the top level object called 'container_info'
  mutate {
    add_field => {
      "[container_info][service]" => "%{[parsed_json][docker][name]}"
      "[container_info][id]" => "%{[parsed_json][docker][id]}"
      "[container_info][version]" => "%{[image_version]}"
      "[container_info][image_name]" => "%{[parsed_json][docker][image]}"
      "fabric_log_message" => "%{[parsed_json][message]}"
    }
    remove_field => ["parsed_json", "message"]
  }
  
  if [container_info][image_name] =~ /^hyperledger\/fabric-peer/ {
    mutate {
      add_field => { "[container_info][type]" => "peer" }
    }
  }
  else if [container_info][image_name] =~ /^hyperledger\/fabric-orderer/ {
    mutate {
      add_field => { "[container_info][type]" => "orderer" }
    }
  }
}

output {
  if [container_info][type] == "peer" {
    pipeline { send_to => peerLogs }
  }
  else if [container_info][type] == "orderer" {
    pipeline { send_to => ordererLogs }
  }
  else {
    pipeline {send_to => defaultLogs}
  }
}